1. What is `NPM`?
NPM is an indispensable tool for JavaScript developers, providing a robust framework for managing code packages, dependencies, and project automation. 
Its integration with Node.js and the vast repository of packages make it a cornerstone of modern web development practices.


2.What is `Parcel/Webpack`? Why do we need it?

Parcel:
------
Parcel is a newer bundler that emphasizes ease of use with a zero-configuration setup. 
It is designed to be fast and simple, making it ideal for smaller projects and beginners.


Webpack:
------
Webpack is a highly configurable module bundler that is extensively used in complex web applications. 
It creates a dependency graph of all the modules in an application, allowing developers to bundle JavaScript files along with other assets like images, fonts, and stylesheets into a single or multiple files that can be served to the browser.

3. What is `.parcel-cache`?

The .parcel-cache directory is a cache folder generated by the Parcel bundler, which is used to store intermediate build results and information about your project. 
This directory plays a crucial role in improving the efficiency of the build process by reducing the time it takes to build or rebuild a project.

4. What is npx?

npx is used to execute node module files.

5. What is difference between `dependencies` vs `devDependencies`

Dependencies:
-----------
	Required for application functionality in production
    Installed with npm install

DevDependencies:
---------------
    Needed only during development
    Installed with npm install --save-dev

6. What is Tree Shaking?

Tree shaking is an optimization technique used in JavaScript to eliminate unused or "dead" code from the final bundle of an application. 
This process is particularly important for reducing the size of the JavaScript files that are sent to the browser, thereby improving the performance of web applications.
Benefits:
-> Reduced bundle size
-> Improved efficiency
-> Cleaner code base


7. What is Hot Module Replacement?
Hot Module Replacement (HMR) is a feature in modern JavaScript development that allows modules to be updated in a running application without requiring a full page reload. This capability significantly enhances the development process by enabling real-time updates, which helps maintain the application state and provides immediate feedback on code changes.

How HMR Works
-------------
HMR operates by checking for updates to modules, downloading the updated code, and applying these updates directly to the running application. This process involves several key steps:
Update Check: The HMR runtime periodically checks for updates to the modules by making an HTTP request to an update manifest.
Download and Apply: If updates are available, the updated chunks of code are downloaded. The runtime then flags the old modules as invalid and applies the new code.
Module Replacement: The updated code is integrated into the application, often requiring developers to specify how the replacement should occur using HMR-specific APIs like module.hot.accept.

Benefits of HMR
---------------
Improved Development Speed:
--------------------------
    By allowing developers to see changes instantly without a full reload, HMR speeds up the development cycle and reduces the time spent waiting for the application to rebuild and reload.

State Preservation:
------------------- 
    Unlike a full page reload, which resets the application state, HMR maintains the current state of the application, allowing developers to test changes in a more realistic environment.

Enhanced Productivity:
----------------------
     With real-time updates, developers can quickly iterate on features, styles, and functionality, which improves overall productivity and efficiency.


8. What is `.gitignore`? What should we add and not add into it?

Using a .gitignore file is considered a best practice in Git repositories as it helps maintain a clean and efficient codebase by excluding files that are not necessary for the project's functionality or collaboration.

The dependencies which are auto generated in the server are not included in the .gitignore file
The dependencies which are not auto generated in the server are included in the .gitignore file. 
such as: source code, configuration files.

9. What is the difference between `package.json` and `package-lock.json`?
package.json:  is essential for defining the project's basic setup and dependencies.
               Manually created and maintained.

package-lock.json: Ensures that the exact same versions of dependencies are used, providing consistency and reliability in builds. 
                   Automatically generated by npm


10. Why should I not modify `package-lock.json`?

Consistency and Reproducibility: 
------------------------------
            The primary purpose of package-lock.json is to ensure that all developers and environments use the exact same versions of dependencies. 
            Manually changing this file can lead to inconsistencies, making it difficult to reproduce builds and potentially causing "it works on my machine" issues.

Automatic Management: 
--------------------
            package-lock.json is automatically generated and updated by npm when you install packages.
            This file records the exact versions of dependencies and their entire dependency tree, which is crucial for consistent installations. 
            Manual edits can disrupt this automatic management and lead to errors or conflicts during installation.

Security and Integrity: 
----------------------
            The file includes integrity checks (hashes) for each package to ensure that the exact same code is used every time. 
            Altering the file manually could compromise these checks, potentially introducing security vulnerabilities if incorrect versions are used.

Potential for Errors: 
--------------------
            Manually editing the package-lock.json can lead to syntax errors or inconsistencies that might break the dependency tree, causing npm to fail during installations or updates.

Version Control and Collaboration:
---------------------------------
             Since package-lock.json is intended to be committed to version control, manual changes can introduce discrepancies that affect other developers working on the project. 
             This can lead to merge conflicts and other collaborative issues.

11. What is `node_modules` ? Is it a good idea to push that on git?

The node_modules folder is a directory in a Node.js project that stores all the external dependencies required by the project. 
These dependencies are installed locally when you run the npm install command, and the folder contains both the direct dependencies specified in your package.json file and any nested dependencies those packages require.

No, it's not a good idea to push that on git. Because the node_modules folder is huge folder, and these files can be autogenerated in server side.


12.What is the `dist` folder?

To hold all the production files created by parcel
npx parcel build index.html


13. What is `browserlists`?
Browserslist is a tool used in web development to specify which browsers a project should support.


14. ^ - caret and ~ - tilda
~ if new major version came, the project will automatically update
^ if new minor version came, the project will automatically update
if don't use any of these signs -> even new version comes, project won't update

15. Script types in html (MDN Docs)
text/javascript
module
application/json
application/ld+json
text/babel
text/typescript



