React Query is a powerful data-fetching and state management library for React applications, designed to simplify the process of fetching, caching, and updating data. It offers an intuitive API and a hooks-based approach, making it particularly well-suited for modern web applications that rely heavily on APIs.

Key Features of React Query
--------------------------

Data Fetching and Caching: 
-------------------------
        React Query provides a declarative approach to data fetching, allowing developers to express their data requirements using hooks like useQuery. 
        It automatically caches the fetched data, reducing unnecessary network requests and improving application performance.

Automatic Updates: 
------------------
        React Query can automatically refetch data in the background, ensuring that the application always displays the most up-to-date information.

Error Handling and Retries: 
---------------------------
        The library includes built-in error handling and retry capabilities, making it easier to manage failed requests and improve the robustness of the application.

Pagination and Infinite Scrolling:
---------------------------------
         React Query supports advanced features like pagination and infinite scrolling, which are essential for handling large datasets efficiently.

Integration with DevTools:
-------------------------
         React Query Devtools provide a visual interface to inspect and debug queries, making it easier to understand the data-fetching process and optimize performance.



Why React Query:
----------------
-> Since React is UI library, there is no specific pattern for the data-fetching process.
-> Use state hook is used for data-fetching and useState hook is used to maintain component state like loading, error or resulting data.
-> If data is needed throught the app, we tend to use state management libraries.
-> Most of the state management libraries are good for working with the client state.
-> State management libraries are not good for working with asynchronous data or server state.


What is Client State?
=====================
Persisted in our app and accessing or updating it is synchronous.

What is Server State?
---------------------
-> Persisted remotely and requires asynchronous APIs for fetching or updating.
-> Has shared ownership
-> Data can be updated someone else without your knowledge
-> UI data may not be sync with remote data
-> Challenging when we need to deal with caching, deduping multiple requests for the same data,
performance optimization etc.
