1. What is React?
Ans. React is an open source javascript library for building user interfaces developed by Facebook.

2. Explain JSX?
Ans. JSX(JavaScript XML) is a syntax extension for javascript recommended by React for describing
what the UI should look like.

3. What is the virtual DOM?
Ans. Virtual DOM is the light weight copy of actual DOM in memory. React uses it to improve performance by
updating only the changed parts of actual DOM in memory.

4. What is significance of keys in React?
Ans. Keys are used to uniquely identify and differentiate between the components.
They help React to know which components are modified, added or removed.

5. What are state and props in React?
Ans. State is an internal datastore that belongs to a specific component, and it can be changed over
time. Props are properties passed to a component from its parent, and they are immutable.

6. What is the difference between the state and the props?
Ans. State is internal to a component and can be changed over time, while props are external and passed to a component.

7. Explain the concept of lifting state up?
Ans. Lifting state up is a pattern where the state of child component is moved to its parent component,
allowing multiple child components to share the same state.

8. What is the purpose of setstate in react?
Ans. Setstate is used to update the state of a component and trigger the re-rendering of the component.

9. What is react router?
Ans. React router is a library that enables navigation among views in react application, allowing for the
development of single page applications.

10. Explain the useEffect hook in react?
Ans. The useEffect hook in react is used for side-effects in functional components. Such as data fetching,
subscriptions or manually changing the DOM.

11. What are controlled components in React?
Ans. Controlled components are components where the form data is controlled by React state. The input elements receive their current value from the state and have their value updated through a callback function.

12. What is Redux, and why is it used?
Ans: Redux is a state management library for JavaScript applications, commonly used with React. It helps manage the state of an application in a predictable way.

13. Explain the concept of higher-order components (HOC).
Ans: Higher-order components are functions that take a component and return a new component with additional features or props.

14. What is the purpose of the useReducer hook?
Ans: The useReducer hook is used for managing complex state logic in React applications. It is an alternative to useState when state transitions are more complex.

15. What is the significance of the key attribute in React lists?
Ans: The key attribute is used to uniquely identify the elements in a list. It helps React effeciently update the DOM when the list changes.

16. What is the difference between the class components and functional components?
Ans: Class components use ES6 classes and have additional features like state and lifecycle methods,
     while functional components are simpler and are often used with hooks.

17. What are React hooks?
Ans: React hooks are functions that allow functional components to use state, lifecycle methods and other react feactures.

18. Explain the purpose of useContext hook?
Ans: The useContext hook is used to access the value of a React context within a functional component.
     It is used to overcome the problem of props drilling.

19. What is the purpose of the componentDidMount lifecycle method?
Ans: ComponentDidMount is invoked immediately after a component is mounted, making it suitable for initial AJAX requests or setting up subscriptions.

20. What is the React developer tool?
Ans: The React Developer tool is a browser extension that allows developers to inspect and debug React component hierarchies in the Chrome and firefox browsers.

21. Explain the concept of context in React.
Ans: Context provides a way to pass data through the component tree without having to pass props manually at every level. It is often used to share
     values like themes or authentication status.

22. What are the advantages of using React?
Ans: React offers a virtual DOM for improved performance, a component-based architecture for modular development, and a strong community support, among other advantages.

23. How does React handle prop drilling, and how can it be avoided?
Ans: Prop drilling occurs when props are passed down through multiple levels of components. It can be avoided by using context or state management libraries like Redux.

24. Explain the significance of React Fragments?
Ans: React Fragments allows developers to group multiple elements without adding an extra node to the DOM,
helping to keep the structure clean.

25. What is the significance of the key prop in React Router?
Ans: The key prop is used to force the remounting of a component when the key changes,
ensuring that the component is fully reinitialized.

26. What is the concept of error boundaries in React?
Ans: Error boundaries are components that catch javascript errors anywhere in their child component
tree and log these errors, display a fallback UI, or take other actions.

27. What is the significance of the memo function in React?
Ans: Memo is a higher-order component that memoizes the rendering of a functional component,
preventing unncessary re-renders if the props have not changed.

28. What is the significance of the useCallback hook in React?
Ans: useCallback hook is used to memoize the call back functions, preventing them from recreating every render.

29. Explain the concept of Suspense in React?
Ans: Suspense is a feature in react that allows component to wait for something before rendering,
such as data fetching or code splitting.

30. What is the purpose of the useEffect cleanup function?
Ans: The cleanup function in useEffect is used to perform cleanup tasks, such as unsubscribing
from subscriptions or clearing intervals when component unmounted.

31. Explain the concept of lazy loading in React?
Ans: Lazy loading is a technique where modules or components loaded only when they are actually needed,
improving initial load times.

32. Explain the concept of useDebugValue hook?
Ans: useDebugValue is used to display a label for custom hooks in React dev tools.

33. What is the purpose of the useReducer hook?
Ans: useReducer is a hook in React used for state management in functional components. It is particularly
useful when the state logic is complex and involves multiple sub values or when the next state depends on the previous state.

34. What are react portals?
Ans: React portals provides a way to render children into a DOM node that exits outside the parent components hierarchy.

35. What is the purpose of forwardRef function in React?
Ans: forwardRef is used to forward references through components, allowing parent components to interact with
the Child's DOM node.

36. Explain the component lifecycle methods in class components.
Ans: componentDidMount(): Called after a component is mounted.
shouldComponentUpdate(): Determines if a component should re-render.
componentDidUpdate(): Called after a component updates.
componentWillUnmount(): Called before a component is removed from the DOM.

37. What is strict mode in React?
Ans: React.StrictMode is a useful component for highlighting potential problems in an application. 
Just like <Fragment>, <StrictMode> does not render any extra DOM elements.
It activates additional checks and warnings for its descendants. 
These checks apply for development mode only.

38. What are synthetic events in React?
Ans: Synthetic events combine the response of different browsers' native events into one API, ensuring consistency across browsers.
The application is consistent regardless of the browser in which it is running.

39. What are the components of Redux?
Ans: Redux has three main components: the store (which holds the application state), actions (which describe what to do), 
and reducers (which define how the state changes in response to actions)

40. What is the difference between Context API and Redux?
Ans: Context API is a simpler way to share state across components without prop drilling and is suitable for less complex applications. 
On the other hand, Redux is more robust, with middleware and a global store, making it better for complex, scalable state management.

41. Explain the use of CSS modules in React.
Ans: CSS modules are scoped CSS files that apply styles locally to components, preventing naming conflicts. 
In React, you can import CSS modules and use them as objects, allowing you to create modular, maintainable styles.

42. How do you handle events in React components?
In React, handling events is a fundamental way to make your application interactive. 
React uses a synthetic event system, which is a wrapper around the native browser events, providing a consistent and cross-browser interface for handling events efficiently.
Example:
-------
function MyButton() {
  const handleClick = () => {
    alert('Button clicked!');
  };

  return (
    <button onClick={handleClick}>Click me</button>
  );
}

43. What is the difference between addEventListener and onChange in React?
Ans: In React, onChange is a prop used to handle changes in form elements like inputs, and it fires on every keystroke for real-time updates. 
In contrast, addEventListener is a native JavaScript method used to attach event listeners to DOM elements. 
React's onChange is preferred because it integrates with React's synthetic event system, automatically handles cleanup, and ensures cross-browser compatibility.

44. What is the difference between a controlled and uncontrolled component?
Ans: 
Controlled Components: These components rely on React's state to manage their values. 
The input field's value is explicitly set by the component's state, and any changes to the input are handled by updating the state through event handlers like onChange.
This makes React the "single source of truth" for the form data, providing more control and predictability over user inputs12.

Uncontrolled Components: These components manage their own internal state using the DOM. 
Instead of relying on React state, you access the current value of an input field using a ref after a form submission or when needed. 
This approach is simpler but offers less control over the form data23.

45. How do you handle route changes and updates in React Router?
In React Router, route changes and updates are handled using several key tools:

Detecting Route Changes:
------------------------
Use the useLocation hook to listen for route changes in functional components.
In older versions, history.listen() can track route changes globally.

Programmatic Navigation:
------------------------
In React Router v6, use the useNavigate hook to navigate programmatically.
In v5, use history.push() for navigation.

Dynamic Routes:
--------------
Access route parameters using the useParams hook in functional components.

Handling 404 Pages:
------------------
Use a wildcard route (*) to catch undefined routes and display a "Not Found" page.

Lazy Loading:
------------
Optimize performance by lazy loading components with React.lazy() and Suspense.

46. How do you optimize React component performance?
Use memoization, shouldComponentUpdate, and React.PureComponent to reduce unnecessary re-renders.

47. How does React handle server-side rendering?
React handles server-side rendering (SSR) by rendering components on the server and sending the fully rendered HTML to the client. 
This improves initial load times and enhances SEO, as search engines can easily index the pre-rendered content. 
React uses ReactDOMServer.renderToString() to convert components into HTML strings on the server, which are then sent to the client for hydration, allowing client-side interactivity to take over once the JavaScript is loaded

48. What is the purpose of the Link component in React Router?
Ans: The Link component in React Router is used for client-side navigation in a Single Page Application (SPA) without reloading the entire page.
It functions similarly to an HTML <a> tag but prevents full page reloads, enabling faster transitions between routes by updating the URL and rendering the corresponding components dynamically.

49. How do you update state in a React component?
Ans: In React, we update state using setState in class components or the useState hook in functional components. 
For example, in functional components, call setState(newState) or pass a function to update based on the previous state. 
Always treat state as immutable to ensure proper re-renders.

50. What is the difference between HTML and React event handling?
Ans: Syntax: HTML uses lowercase event names (e.g., onclick), while React uses camelCase (e.g., onClick). In HTML, functions are invoked with (); in React, you pass the function reference without () unless arguments are needed.
Preventing Default Behavior: HTML allows returning false to prevent default actions, whereas React requires explicitly calling event.preventDefault() on the synthetic event object .
Event System: HTML interacts directly with the real DOM, while React uses a synthetic event system for cross-browser consistency and better performance via the virtual DOM .
Event Binding: In HTML, events can be attached inline or via addEventListener. React binds events during component creation and does not use addEventListener in components .

51. What is the difference between a stateless and stateful component in React?
Ans: Stateful Components
    -------------------
Definition: These components manage their own internal state. They keep track of data that can change over time, such as user inputs or dynamic content.
Characteristics:
Can hold and update state using this.state (class components) or useState (functional components with hooks).
Have access to lifecycle methods (e.g., componentDidMount, componentDidUpdate) in class components.
Typically used for handling complex logic or dynamic behavior.

Stateless Components
--------------------
Definition: These components do not manage their own state. They rely entirely on props passed from parent components to render UI.
Characteristics:
Simpler and easier to test since they are essentially pure functions of their props.
Do not have lifecycle methods or internal state (unless using hooks like useState, which makes them technically stateful).
Primarily used for presentational purposes, focusing on how things look rather than how they work.

52. Redux toolkit?
Ans: Redux Toolkit (RTK) is the official, recommended approach for writing Redux logic.
It simplifies state management in React applications by addressing common challenges developers face with traditional Redux.
"Redux Toolkit is a modern library built on top of Redux to simplify and streamline state management. 
It reduces boilerplate code, simplifies store setup with configureStore, and makes reducers easier to write using createSlice, which supports mutable syntax via Immer. 
RTK also includes powerful utilities like createAsyncThunk for handling async logic and RTK Query for data fetching and caching. 
By automating common tasks like integrating Redux DevTools and middleware, it eliminates many pain points of traditional Redux while maintaining its core principles. Overall, it makes Redux more efficient, developer-friendly, and easier to maintain." 

53. Explain debouncing?
Ans: Debouncing is a programming technique used to improve performance by limiting how often a function is executed, especially in scenarios where the function is triggered frequently, such as user input events, scrolling, or resizing. 
In React development, debouncing is particularly useful for optimizing event handling and ensuring that heavy operations, like API calls or DOM updates, are not executed too often.