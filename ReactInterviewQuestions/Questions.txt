1. What problem does React solve in web development?
Ans: React solves key web development challenges by:
Efficient UI Updates: Uses a Virtual DOM to optimize rendering and improve performance.
Component-Based Architecture: Enables reusable, modular, and maintainable code.
State Management: Simplifies handling dynamic data and application state.
Declarative Syntax: Makes UI development predictable and easier to debug.
Scalability: Handles complex applications with a unidirectional data flow.
Cross-Platform Development: Supports web and mobile via React Native.
SEO Optimization: Enables server-side rendering for better search engine indexing.

2. Is react javasript library or framework?
Ans: React is a JavaScript library for building user interfaces. It focuses on rendering UI components and managing state, making it lightweight and flexible. 
Unlike frameworks, React doesn’t dictate the app’s structure or include features like routing or state management, which need to be added separately.

3. How does react make it easier to build user interfaces?
Ans: React makes building user interfaces easier through its component-based architecture, which promotes reusability and modularity. 
It uses a Virtual DOM for efficient updates, ensuring high performance. 
Its declarative syntax simplifies coding by focusing on what the UI should look like rather than how to implement it. 
Additionally, React's rich ecosystem, cross-platform capabilities with React Native, and tools for debugging and state management enhance productivity and scalability.

4. What is babel and why it is used in react development?
Ans: Babel is a widely-used JavaScript compiler that plays a crucial role in React development. 
Its primary purpose is to transform modern JavaScript (ES6+ and beyond) and JSX (JavaScript XML) into a version of JavaScript that is compatible with older browsers, ensuring cross-browser functionality.

Why Babel is Used in React Development
--------------------------------------
React relies heavily on modern JavaScript features and JSX, which are not natively supported by all browsers. Babel addresses these challenges by:
Transpiling Modern JavaScript Syntax:
Converts ES6+ features like arrow functions, classes, and destructuring into ES5 syntax, which is supported by older browsers.

For example:
------------
javascript
// Input: ES6 Arrow Function
const add = (a, b) => a + b;

// Output after Babel transpilation
var add = function(a, b) {
  return a + b;
};

5. What is the key difference between JSX and HTML when it comes to element attributes?
CamelCase for Attributes: In JSX, all HTML attributes and event handlers must be written in camelCase. 
For example, onclick in HTML becomes onClick in JSX, and onmouseover becomes onMouseOver126. 
This is because JSX is a syntax extension for JavaScript, and JavaScript uses camelCase conventions.

Reserved Keywords: Some attributes in HTML conflict with JavaScript reserved keywords. 
For instance, the class attribute in HTML is written as className in JSX because class is a reserved keyword in JavaScript. 
Similarly, the for attribute in HTML becomes htmlFor in JSX235.

Style Attribute: In HTML, styles are defined as a single string with CSS properties separated by semicolons. 
In JSX, the style attribute must be an object with camelCased property names, and values must be strings. 
For example, <div style="color: blue;"> in HTML would be <div style={{color: 'blue'}}> in JSX